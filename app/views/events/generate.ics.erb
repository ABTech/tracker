<%

require 'icalendar/tzinfo'

calendar = Icalendar::Calendar.new();
calendar.prodid = "ABTechTracker"

calendar.timezone do |tz|
  tz.tzid = "America/New_York"
end

# THIS WAS AN AWFUL MISIMPLEMENTATION OF ICALENDAR!#
# let uid be created automagically by Icalendar::Evenet.new()
#uid = 0;

@eventdates.each do |date|
  event = date.event
  summary = event.title + " - " + date.description;
  description = "";

  description << "Event: #{event.title} - #{date.description}\n";
  description << "Locations:\n";
  date.locations.sorted.each do |loc|
    description << "-- " + loc.to_s() + "\n";
  end
  if(!date.equipment_profile.empty?)
    description << "Equipment Profile: " <<  date.equipment_profile.collect{ |equipment_profile| equipment_profile.shortname }.join(", ") << "\n";
  end
  if @include_url
    description << "URL: #{event_url(event)}\n";
  end

  EventRole::Roles_All.each do |type|
    roles = event.event_roles.reject{ |role| role.role() != type };
    if(!roles.empty?)
      description << type + ": ";

      description << roles.collect{ |role|
          role.member ?
            role.member.email.split("@").first :
            "SAM"
        }.join(", ");

      description << "\n";
    end
  end
  
  description << "\n" + date.email_description + "\n"

  # escape for ics format: newline becomes (literal) \n
  description = description.chomp().gsub("\n", "\\n");

  cancelled = Event::Event_Status_Group_Cancelled.index(event.status) ? "CANCELLED - " : "";

  # generate call event 
  if date.has_call?
    calendar.event do |e|
      e.uid = "abtech.andrew.cmu.edu:" + (date.id * 3).to_s + "_CALL"
      e.dtstart = date.effective_call
      e.dtend   = date.startdate
      e.summary    = cancelled + summary + " Call";
      e.description  = description;
    end
  end

  # generate event event
  calendar.event do |e|
    e.uid = "abtech.andrew.cmu.edu:" + (date.id * 3).to_s + "_SHOW"
    e.dtstart  =  date.startdate
    e.dtend   = date.enddate
    e.summary    = cancelled + summary + " Show";
    e.description  = description;
  end

  # generate strike event
  if date.has_strike?
    calendar.event do |e|
      e.uid = "abtech.andrew.cmu.edu:" + (date.id * 3).to_s + "_STRIKE"
      e.dtstart    = date.effective_strike
      e.dtend    = (date.effective_strike + 60 * 60)
      e.summary    = cancelled + summary + " Strike";
      e.description  = description;
    end
  end
end

%><%= raw calendar.to_ical() %>
